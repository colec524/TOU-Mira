<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TownOfUsMira</name>
    </assembly>
    <members>
        <member name="P:TownOfUs.Buttons.TownOfUsButton.Keybind">
            <summary>
                Gets the keybind used for the button.<br />
                Use ActionQuaternary for primary abilities, ActionSecondary for secondary abilities or kill buttons,
                tou.ActionCustom for tertiary abilities, and tou.ActionCustom2 for modifier buttons.
            </summary>
        </member>
        <member name="P:TownOfUs.Buttons.TownOfUsTargetButton`1.Keybind">
            <summary>
                Gets the keybind used for the button.
                Use ActionQuaternary for primary abilities, ActionSecondary for secondary abilities or kill buttons,
                tou.ActionCustom for tertiary abilities, and tou.ActionCustom2 for modifier buttons.
            </summary>
        </member>
        <member name="T:TownOfUs.Events.TouEvents.ChangeRoleEvent">
            <summary>
                Event that is invoked after a player's role is changed through Tou Mira. This event is not cancelable.
            </summary>
        </member>
        <member name="M:TownOfUs.Events.TouEvents.ChangeRoleEvent.#ctor(PlayerControl,RoleBehaviour,RoleBehaviour)">
            <summary>
                Initializes a new instance of the <see cref="T:TownOfUs.Events.TouEvents.ChangeRoleEvent" /> class.
            </summary>
            <param name="player">The player.</param>
            <param name="oldRole">The player's previous role.</param>
            <param name="newRole">The player's new role.</param>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.ChangeRoleEvent.Player">
            <summary>
                Gets the player that changed roles.
            </summary>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.ChangeRoleEvent.OldRole">
            <summary>
                Gets the Role of the player prior to the role being changed.
            </summary>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.ChangeRoleEvent.NewRole">
            <summary>
                Gets the Role of the player after the role is changed.
            </summary>
        </member>
        <member name="T:TownOfUs.Events.TouEvents.PlayerReviveEvent">
            <summary>
                Event that is invoked after a player is revived. This event is not cancelable.
            </summary>
        </member>
        <member name="M:TownOfUs.Events.TouEvents.PlayerReviveEvent.#ctor(PlayerControl)">
            <summary>
                Initializes a new instance of the <see cref="T:TownOfUs.Events.TouEvents.PlayerReviveEvent" /> class.
            </summary>
            <param name="player">The player who was revived.</param>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.PlayerReviveEvent.Player">
            <summary>
                Gets the player who was revived.
            </summary>
        </member>
        <member name="T:TownOfUs.Events.TouEvents.TouAbilityEvent">
            <summary>
                Event that is invoked after a player uses specific abilities. This event is not cancelable.
            </summary>
        </member>
        <member name="M:TownOfUs.Events.TouEvents.TouAbilityEvent.#ctor(TownOfUs.Events.TouEvents.AbilityType,PlayerControl,UnityEngine.MonoBehaviour,UnityEngine.MonoBehaviour)">
            <summary>
                Initializes a new instance of the <see cref="T:TownOfUs.Events.TouEvents.TouAbilityEvent" /> class.
            </summary>
            <param name="ability">The player's ability that was used.</param>
            <param name="player">The player who used the ability.</param>
            <param name="target">The player's target, if available.</param>
            <param name="target2">The player's second target, if available.</param>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.TouAbilityEvent.Player">
            <summary>
                Gets the player who used the ability.
            </summary>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.TouAbilityEvent.Target">
            <summary>
                Gets the target of the ability, if any.
            </summary>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.TouAbilityEvent.Target2">
            <summary>
                Gets the second target of the ability, if any.
            </summary>
        </member>
        <member name="P:TownOfUs.Events.TouEvents.TouAbilityEvent.AbilityType">
            <summary>
                Gets the ability used by the player.
            </summary>
        </member>
        <member name="M:TownOfUs.Roles.ITownOfUsRole.LobbyStart">
            <summary>
                LobbyStart - Called for each role when a lobby begins.
            </summary>
        </member>
        <member name="T:TownOfUs.TownOfUsPlugin">
            <summary>
                Plugin class for Town of Us.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.Culture">
            <summary>
                Gets the specified Culture for string manipulations.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.Harmony">
            <summary>
                Gets the Harmony instance for patching.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.IsDevBuild">
            <summary>
                Determines if the current build is a dev build or not. This will change certain visuals as well as always grab news locally to be up to date.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.OptionsTitleText">
            <inheritdoc />
        </member>
        <member name="M:TownOfUs.TownOfUsPlugin.GetConfigFile">
            <inheritdoc />
        </member>
        <member name="M:TownOfUs.TownOfUsPlugin.Load">
            <summary>
                The Load method for the plugin.
            </summary>
        </member>
        <member name="F:TownOfUs.TownOfUsPlugin.Id">
            <summary>
            Id of the <see cref="T:TownOfUs.TownOfUsPlugin"/>.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.Name">
            <summary>
            Gets the name of the <see cref="T:TownOfUs.TownOfUsPlugin"/>.
            </summary>
        </member>
        <member name="P:TownOfUs.TownOfUsPlugin.Version">
            <summary>
            Gets the version of the <see cref="T:TownOfUs.TownOfUsPlugin"/>.
            </summary>
        </member>
        <member name="M:TownOfUs.Utilities.Extensions.GetClosestLivingPlayer(PlayerControl,System.Boolean,System.Single,System.Boolean,System.Predicate{PlayerControl})">
            <summary>
                Gets the closest player that matches the given criteria that also isn't hidden by other roles.
            </summary>
            <param name="playerControl">The player object.</param>
            <param name="includeImpostors">Whether impostors should be included in the search.</param>
            <param name="distance">The radius to search within.</param>
            <param name="ignoreColliders">Whether colliders should be ignored when searching.</param>
            <param name="predicate">Optional predicate to test if the object is valid.</param>
            <returns>The closest player if there is one, false otherwise.</returns>
        </member>
        <member name="M:TownOfUs.Utilities.MiscUtils.GetFakePlayer(PlayerControl)">
            <summary>
                Gets a FakePlayer by comparing PlayerControl.
            </summary>
            <param name="player">The player themselves.</param>
            <returns>A fake player or null if its not found.</returns>
        </member>
    </members>
</doc>
